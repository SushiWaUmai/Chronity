{
  "api/Chronity.EditorTimer.html": {
    "href": "api/Chronity.EditorTimer.html",
    "title": "Class EditorTimer | Chronity",
    "keywords": "Class EditorTimer Allows you to run events in the editor on a delay. To create and start a Timer, use the Register(Single, Action, Action<Single>, Boolean) method. Inheritance System.Object TimerBase EditorTimer Inherited Members TimerBase.Pause() TimerBase.Resume() TimerBase.Cancel() TimerBase.IsDone TimerBase.IsCanceled TimerBase.IsCompleted TimerBase.Duration TimerBase.IsLooped TimerBase.IsPaused TimerBase.TimeElapsed TimerBase.TimeRemaining TimerBase.RatioComplete TimerBase.RatioRemaining TimerBase.HandlePause() TimerBase.CheckTime() TimerBase.HandleUpdate() TimerBase.TimeDelta TimerBase._onComplete TimerBase._onUpdate TimerBase._startTime TimerBase._lastTime TimerBase._endTime System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ToString() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Chronity Assembly : cs.temp.dll.dll Syntax public class EditorTimer : TimerBase Constructors EditorTimer(Single, Action, Action<Single>, Boolean) Declaration EditorTimer(float duration, Action onComplete, Action<float> onUpdate, bool isLooped = false) Parameters Type Name Description System.Single duration System.Action onComplete System.Action < System.Single > onUpdate System.Boolean isLooped Fields _timers Declaration static List<EditorTimer> _timers Field Value Type Description List < EditorTimer > Properties CurrentTime Declaration protected override float CurrentTime { get; } Property Value Type Description System.Single Overrides TimerBase.CurrentTime Methods CancelAllTimers() Cancels all created timers. Declaration public static void CancelAllTimers() Finalize() Declaration protected void Finalize() PauseAllTimers() Pauses all created timers. Declaration public static void PauseAllTimers() Register(Single, Action, Action<Single>, Boolean) Register a new timer that should fire an event after a certain amount of time has elapsed. Registered timers are destroyed when the scene changes. Declaration public static EditorTimer Register(float duration, Action onComplete, Action<float> onUpdate = null, bool isLooped = false) Parameters Type Name Description System.Single duration The time to wait before the timer should fire, in seconds. System.Action onComplete An action to fire when the timer completes. System.Action < System.Single > onUpdate An action that should fire each time the timer is updated. Takes the amount of time passed in seconds since the start of the timer's current loop. System.Boolean isLooped Whether the timer should repeat after executing. Returns Type Description EditorTimer A timer object that allows you to examine stats and stop/resume progress. ResumeAllTimers() Resumes all created timers. Declaration public static void ResumeAllTimers() Update() Declaration protected override void Update() Overrides TimerBase.Update()"
  },
  "api/Chronity.html": {
    "href": "api/Chronity.html",
    "title": "Namespace Chronity | Chronity",
    "keywords": "Namespace Chronity Classes EditorTimer Allows you to run events in the editor on a delay. To create and start a Timer, use the Register(Single, Action, Action<Single>, Boolean) method. Timer Allows you to run events during runtime on a delay without the use of or . To create and start a Timer, use the Register(Single, Action, Action<Single>, Boolean, Boolean, Boolean, MonoBehaviour) method. Timer.TimerManager internal class to handle timers during runtime TimerBase Base of the Timer Class, it allows you to run events on a delay without the use of or TimerExtension Contains extension methods related to Timer"
  },
  "api/Chronity.Timer.html": {
    "href": "api/Chronity.Timer.html",
    "title": "Class Timer | Chronity",
    "keywords": "Class Timer Allows you to run events during runtime on a delay without the use of or . To create and start a Timer, use the Register(Single, Action, Action<Single>, Boolean, Boolean, Boolean, MonoBehaviour) method. Inheritance System.Object TimerBase Timer Inherited Members TimerBase.Pause() TimerBase.Resume() TimerBase.Cancel() TimerBase.IsCanceled TimerBase.IsCompleted TimerBase.Duration TimerBase.IsLooped TimerBase.IsPaused TimerBase.TimeElapsed TimerBase.TimeRemaining TimerBase.RatioComplete TimerBase.RatioRemaining TimerBase.Update() TimerBase.HandlePause() TimerBase.CheckTime() TimerBase.HandleUpdate() TimerBase.TimeDelta TimerBase._onComplete TimerBase._onUpdate TimerBase._startTime TimerBase._lastTime TimerBase._endTime System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ToString() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Chronity Assembly : cs.temp.dll.dll Syntax public class Timer : TimerBase Constructors Timer(Single, Action, Action<Single>, Boolean, Boolean, Boolean, MonoBehaviour) Declaration protected Timer(float duration, Action onComplete, Action<float> onUpdate, bool usesRealTime = false, bool isLooped = false, bool cancelOnSceneChange = true, MonoBehaviour attachedBehavior = null) Parameters Type Name Description System.Single duration System.Action onComplete System.Action < System.Single > onUpdate System.Boolean usesRealTime System.Boolean isLooped System.Boolean cancelOnSceneChange MonoBehaviour attachedBehavior Fields _hasAttachedBehavior Declaration readonly bool _hasAttachedBehavior Field Value Type Description System.Boolean Properties AttachedBehavior The the timer is attached to. Declaration public MonoBehaviour AttachedBehavior { get; } Property Value Type Description MonoBehaviour AttachedBehaviorDestroyed Declaration bool AttachedBehaviorDestroyed { } Property Value Type Description System.Boolean CancelOnSceneChange Whether the timer should be destroyed when scene changes. Declaration public bool CancelOnSceneChange { get; } Property Value Type Description System.Boolean CurrentTime Declaration protected override float CurrentTime { get; } Property Value Type Description System.Single Overrides TimerBase.CurrentTime IsDone Declaration public override bool IsDone { get; } Property Value Type Description System.Boolean Overrides TimerBase.IsDone UsesRealTime Whether the timer uses real-time or game-time. Real time is unaffected by changes to of the game (e.g. pausing, slow-mo), while game time is affected. Declaration public bool UsesRealTime { get; } Property Value Type Description System.Boolean Methods CancelAllTimers() Cancels all created timers. Declaration public static void CancelAllTimers() PauseAllTimers() Pauses all created timers. Declaration public static void PauseAllTimers() Register(Single, Action, Action<Single>, Boolean, Boolean, Boolean, MonoBehaviour) Register a new timer that should fire an event after a certain amount of time has elapsed. Registered timers are destroyed when the scene changes. Declaration public static Timer Register(float duration, Action onComplete, Action<float> onUpdate = null, bool useRealTime = false, bool isLooped = false, bool cancelOnSceneChange = true, MonoBehaviour attachedBehavior = null) Parameters Type Name Description System.Single duration The time to wait before the timer should fire, in seconds. System.Action onComplete An action to fire when the timer completes. System.Action < System.Single > onUpdate An action that should fire each time the timer is updated. Takes the amount of time passed in seconds since the start of the timer's current loop. System.Boolean useRealTime Whether the timer uses real-time(i.e. not affected by pauses, slow/fast motion) or game-time(will be affected by pauses and slow/fast-motion). System.Boolean isLooped Whether the timer should repeat after executing. System.Boolean cancelOnSceneChange Whether the timer should cancel when the scene changes MonoBehaviour attachedBehavior An object to attach this timer to. After the object is destroyed, the timer will expire and not execute. This allows you to avoid annoying System.NullReferenceException s by preventing the timer from running and accessessing its parents' components after the parent has been destroyed. Returns Type Description Timer A timer object that allows you to examine stats and stop/resume progress. ResumeAllTimers() Resumes all created timers. Declaration public static void ResumeAllTimers()"
  },
  "api/Chronity.Timer.TimerManager.html": {
    "href": "api/Chronity.Timer.TimerManager.html",
    "title": "Class Timer.TimerManager | Chronity",
    "keywords": "Class Timer.TimerManager internal class to handle timers during runtime Inheritance System.Object Timer.TimerManager Namespace : Chronity Assembly : cs.temp.dll.dll Syntax class TimerManager : MonoBehaviour Fields _singleton Declaration static Timer.TimerManager _singleton Field Value Type Description Timer.TimerManager _timers Declaration List<Timer> _timers Field Value Type Description List < Timer > Properties Singleton Declaration public static Timer.TimerManager Singleton { get; } Property Value Type Description Timer.TimerManager Methods Awake() Declaration void Awake() CancelAllTimers() Declaration public static void CancelAllTimers() HandleSceneChange(Scene, Scene) Declaration void HandleSceneChange(Scene from, Scene to) Parameters Type Name Description Scene from Scene to OnDestroy() Declaration void OnDestroy() PauseAllTimers() Declaration public static void PauseAllTimers() RegisterTimer(Timer) Declaration public static void RegisterTimer(Timer timer) Parameters Type Name Description Timer timer RemoveAbundantTimers() Declaration static void RemoveAbundantTimers() ResumeAllTimers() Declaration public static void ResumeAllTimers() Start() Declaration void Start() Update() Declaration void Update() UpdateAllTimers() Declaration static void UpdateAllTimers()"
  },
  "api/Chronity.TimerBase.html": {
    "href": "api/Chronity.TimerBase.html",
    "title": "Class TimerBase | Chronity",
    "keywords": "Class TimerBase Base of the Timer Class, it allows you to run events on a delay without the use of or Inheritance System.Object TimerBase EditorTimer Timer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ToString() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Chronity Assembly : cs.temp.dll.dll Syntax public abstract class TimerBase Constructors TimerBase(Single, Action, Action<Single>, Boolean) Declaration protected TimerBase(float duration, Action onComplete, Action<float> onUpdate, bool isLooped = false) Parameters Type Name Description System.Single duration System.Action onComplete System.Action < System.Single > onUpdate System.Boolean isLooped Fields _lastTime Declaration float _lastTime Field Value Type Description System.Single _onComplete Declaration readonly Action _onComplete Field Value Type Description System.Action _onUpdate Declaration readonly Action<float> _onUpdate Field Value Type Description System.Action < System.Single > _startTime Declaration float _startTime Field Value Type Description System.Single Properties _endTime Declaration float _endTime { } Property Value Type Description System.Single CurrentTime Declaration protected abstract float CurrentTime { get; } Property Value Type Description System.Single Duration How long it takes to complete from start of finish. Declaration public float Duration { get; } Property Value Type Description System.Single IsCanceled Whether the timer has canceled running. Declaration public bool IsCanceled { get; } Property Value Type Description System.Boolean IsCompleted Whether the timer has completed running. This is false when timer was canceled. Declaration public bool IsCompleted { get; } Property Value Type Description System.Boolean IsDone Whether the timer has finished for any reason. Declaration public virtual bool IsDone { get; } Property Value Type Description System.Boolean IsLooped Whether the timer will run again upon completion. Declaration public bool IsLooped { get; } Property Value Type Description System.Boolean IsPaused Whether the timer is paused Declaration public bool IsPaused { get; } Property Value Type Description System.Boolean RatioComplete How much progress the timer made from start to finish as a ratio Declaration public float RatioComplete { get; } Property Value Type Description System.Single RatioRemaining How much progress the timer has left as a ratio Declaration public float RatioRemaining { get; } Property Value Type Description System.Single TimeDelta Declaration float TimeDelta { } Property Value Type Description System.Single TimeElapsed How many seconds have elapsed since the start of the timer. Declaration public float TimeElapsed { get; } Property Value Type Description System.Single TimeRemaining How many seconds there are left until completion. Declaration public float TimeRemaining { get; } Property Value Type Description System.Single Methods Cancel() Cancels the timer. The timer's onComplete callback will not be called. Declaration public void Cancel() CheckTime() Declaration void CheckTime() HandlePause() Declaration void HandlePause() HandleUpdate() Declaration void HandleUpdate() Pause() Pause a running timer. A paused timer can be resumed from the same point it was paused. Declaration public void Pause() Resume() Continue a paused timer. Does nothing if the timer has not been paused. Declaration public void Resume() Update() Declaration protected virtual void Update()"
  },
  "api/Chronity.TimerExtension.html": {
    "href": "api/Chronity.TimerExtension.html",
    "title": "Class TimerExtension | Chronity",
    "keywords": "Class TimerExtension Contains extension methods related to Timer Inheritance System.Object TimerExtension Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ToString() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Chronity Assembly : cs.temp.dll.dll Syntax public static class TimerExtension Methods AttachTimer(MonoBehaviour, Single, Action, Action<Single>, Boolean, Boolean, Boolean) Attach a timer on to the behaviour. If the behaviour is destroyed before the timer is completed, e.g. through a scene change, the timer callback will not execute. Declaration public static Timer AttachTimer(this MonoBehaviour behaviour, float duration, Action onComplete, Action<float> onUpdate = null, bool useRealTime = false, bool isLooped = false, bool cancelOnSceneChange = true) Parameters Type Name Description MonoBehaviour behaviour The behaviour to attach this timer to. System.Single duration The duration to wait before the timer fires. System.Action onComplete The action to run when the timer elapses. System.Action < System.Single > onUpdate A function to call each tick of the timer. Takes the number of seconds elapsed since the start of the current cycle. System.Boolean useRealTime Whether the timer uses real-time(not affected by slow-mo or pausing) or game-time(affected by time scale changes). System.Boolean isLooped Whether the timer should restart after executing. System.Boolean cancelOnSceneChange Whether the timer should cancel when the scene changes Returns Type Description Timer A timer object that allows you to examine stats and stop/resume progress."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "API Refernce | Chronity",
    "keywords": "Chronity API Reference This is the API Reference of the Chronity Package. Get started with the Chronity namespace."
  },
  "index.html": {
    "href": "index.html",
    "title": "A Unity3D Timer Library | Chronity",
    "keywords": ""
  },
  "manual/features.html": {
    "href": "manual/features.html",
    "title": "Features | Chronity",
    "keywords": "Features ✨ Make a timer repeat by setting isLooped to true. // Log \"Hello World\" every 10 seconds. Timer.Register(10f, () => Debug.Log(\"Hello World\"), isLooped: true); Cancel a timer after calling it. private Timer timer; private void Start() { timer = Timer.Register(2f, () => Debug.Log(\"You won't see this text if you press X.\")); } private void Update() { if (Input.GetKeyDown(KeyCode.X)) { Timer.Cancel(timer); } } Attach the timer to a MonoBehaviour so that the timer is destroyed when the MonoBehaviour is. Very often, a timer called from a MonoBehaviour will manipulate that behaviour's state. Thus, it is common practice to cancel the timer in the OnDestroy method of the MonoBehaviour. We've added a convenient extension method that attaches a Timer to a MonoBehaviour such that it will automatically cancel the timer when the MonoBehaviour is detected as null. public class CoolMonoBehaviour : MonoBehaviour { private void Start() { // Use the AttachTimer extension method to create a timer that is destroyed when this // object is destroyed. this.AttachTimer(5f, () => { // If this code runs after the object is destroyed, a null reference will be thrown, // which could corrupt game state. this.gameObject.transform.position = Vector3.zero; }); } private void Update() { // This code could destroy the object at any time! if (Input.GetKeyDown(KeyCode.X)) { GameObject.Destroy(this.gameObject); } } } Update a value gradually over time using the onUpdate callback. // Change a color from white to red over the course of five seconds. Color color = Color.white; float transitionDuration = 5f; Timer.Register(transitionDuration, onUpdate: secondsElapsed => color.r = 255 * (secondsElapsed / transitionDuration), onComplete: () => Debug.Log(\"Color is now red\")); Make a timer presist through scene changes using the cancelOnSceneChange parameter. // Make a timer that will persist through scene changes. Timer.Register(5f, () => Debug.Log(\"Hello World\"), cancelOnSceneChange: false); // Change scene from another script // Logs \"Hello World\" after 5 seconds. Make a timer run in the editor by using the EditorTimer class. // Logs \"Hello World\" after 5 seconds in the editor EditorTimer.Register(5, () => Debug.Log(\"Hello World\"));"
  },
  "manual/getting-started.html": {
    "href": "manual/getting-started.html",
    "title": "Getting Started | Chronity",
    "keywords": "Getting Started 🚀 Installation Install with Git Please follow the instructions in the manual about Installing a package from a Git URL . Use the following URL to install the latest version of the package: https://github.com/SushiWaUmai/Chronity.git?path=/com.sushiwaumai.chronity Install with OpenUPM This needs OpenUPM to be installed to your machine. Chronity can also be installed using OpenUPM. Run the following command on the project root folder: openupm add com.sushiwaumai.chronity Quick Start 🎓 This is how to call a function after a delay in Chronity. // Log \"Hello World\" after five seconds. Timer.Register(5f, () => Debug.Log(\"Hello World\"));"
  }
}